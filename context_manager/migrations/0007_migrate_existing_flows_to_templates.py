# Generated by Django 5.2.5 on 2025-08-16 06:06

from django.db import migrations


def migrate_existing_flows_to_templates(apps, schema_editor):
    """
    Data migration to convert existing FlowStep records into the new template-based system.
    
    This migration will:
    1. Create FlowTemplate records for each unique flow_type
    2. Create FlowStepTemplate records for each FlowStep
    3. Create HotelFlowConfiguration records for hotel-specific flows
    4. Preserve existing hotel customizations in the new customization_data field
    """
    FlowStep = apps.get_model('context_manager', 'FlowStep')
    FlowTemplate = apps.get_model('context_manager', 'FlowTemplate')
    FlowStepTemplate = apps.get_model('context_manager', 'FlowStepTemplate')
    HotelFlowConfiguration = apps.get_model('context_manager', 'HotelFlowConfiguration')
    Hotel = apps.get_model('hotel', 'Hotel')
    
    # Create FlowTemplate records for each unique flow_type
    flow_types = FlowStep.objects.values_list('flow_type', flat=True).distinct()
    
    flow_type_to_template = {}
    for flow_type in flow_types:
        if flow_type:  # Skip None/empty flow types
            template, created = FlowTemplate.objects.get_or_create(
                name=f"{flow_type.replace('_', ' ').title()} Flow",
                category=flow_type,
                defaults={
                    'description': f"Template for {flow_type.replace('_', ' ')} flows",
                    'is_active': True
                }
            )
            flow_type_to_template[flow_type] = template
    
    # Create FlowStepTemplate records for each FlowStep
    for flow_step in FlowStep.objects.all():
        # Determine which template this step belongs to
        template = flow_type_to_template.get(flow_step.flow_type)
        if not template:
            continue
            
        # Create FlowStepTemplate
        step_template = FlowStepTemplate.objects.create(
            flow_template=template,
            step_name=flow_step.step_id.replace('_', ' ').title(),
            message_template=flow_step.message_template,
            message_type='TEXT',  # Default assumption
            options=flow_step.options,
            conditional_next_steps=flow_step.conditional_next_steps
        )
        
        # If this is a hotel-specific flow step, create HotelFlowConfiguration
        if flow_step.hotel:
            # Get or create configuration
            config, created = HotelFlowConfiguration.objects.get_or_create(
                hotel=flow_step.hotel,
                flow_template=template,
                defaults={
                    'is_enabled': True,
                    'customization_data': {
                        'step_customizations': {
                            flow_step.step_id: {
                                'message_template': flow_step.message_template,
                                'options': flow_step.options,
                                'conditional_next_steps': flow_step.conditional_next_steps
                            }
                        }
                    }
                }
            )
            
            # If config already existed, update customization data
            if not created:
                customization_data = config.customization_data or {}
                step_customizations = customization_data.get('step_customizations', {})
                step_customizations[flow_step.step_id] = {
                    'message_template': flow_step.message_template,
                    'options': flow_step.options,
                    'conditional_next_steps': flow_step.conditional_next_steps
                }
                customization_data['step_customizations'] = step_customizations
                config.customization_data = customization_data
                config.save()


def reverse_migrate_existing_flows_to_templates(apps, schema_editor):
    """
    Reverse migration to remove template system data.
    This is a simplified reverse operation that just clears the new models.
    """
    FlowTemplate = apps.get_model('context_manager', 'FlowTemplate')
    FlowStepTemplate = apps.get_model('context_manager', 'FlowStepTemplate')
    HotelFlowConfiguration = apps.get_model('context_manager', 'HotelFlowConfiguration')
    
    # Delete all records from the new models
    HotelFlowConfiguration.objects.all().delete()
    FlowStepTemplate.objects.all().delete()
    FlowTemplate.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('context_manager', '0006_flowaction_flowtemplate_webhooklog_and_more'),
    ]

    operations = [
        migrations.RunPython(
            migrate_existing_flows_to_templates, 
            reverse_migrate_existing_flows_to_templates
        ),
    ]
