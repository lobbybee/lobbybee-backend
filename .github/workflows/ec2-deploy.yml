name: Docker Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Create .env file for Docker build
      run: |
        echo "${{ secrets.ENV_PROD }}" | base64 --decode > .env

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/lobbybee-web
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=,suffix=,format=short

    - name: Build and push Django app (web service)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/lobbybee-web:latest
        cache-to: type=inline

    # NEW: Clean up Docker resources FIRST
    - name: Clean up Docker resources on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Cleaning up Docker resources..."

          # Gracefully stop services first
          docker compose -f ~/app/docker-compose.prod.yml down --remove-orphans 2>/dev/null || true

          # Remove unused images (aggressive cleanup)
          docker image prune -a -f

          # Remove unused volumes
          docker volume prune -f

          # Remove unused networks
          docker network prune -f

          # Remove build cache
          docker builder prune -a -f

          # Show disk usage after cleanup
          echo "Disk usage after cleanup:"
          df -h

    - name: Clean EC2 directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo rm -rf ~/app
          mkdir -p ~/app

    - name: Copy application code and configs to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: |
          .
        target: "~/app"
        strip_components: 0
        overwrite: true
        rm: true

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/app

          # Fix SSL certificate permissions
          chmod 644 config/certs/ssl-dhparams.pem
          chmod 644 config/certs/options-ssl-nginx.conf
          chmod 755 config/certs/

          # Recreate the .env file
          echo "${{ secrets.ENV_PROD }}" | base64 --decode > .env

          # Login to Docker Hub
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Build images with no cache to ensure fresh build
          echo "Building service images..."
          docker compose -f docker-compose.prod.yml build --no-cache web celery celery-beat

          # Pull other images
          echo "Pulling other service images..."
          docker compose -f docker-compose.prod.yml pull

          # Run migrations
          echo "Applying Django migrations..."
          docker compose -f docker-compose.prod.yml run --rm web python manage.py migrate --noinput

          # Start services
          echo "Starting services..."
          docker compose -f docker-compose.prod.yml up -d

          echo "Deployment finished!"
