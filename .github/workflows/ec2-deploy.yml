name: Docker Build and Deploy

on:
  push:
    branches: [ "main" ] # Or your main branch name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # --- NEW STEP: Create .env file for build ---
    - name: Create .env file for Docker build
      run: |
        echo "${{ secrets.ENV_PROD }}" | base64 --decode > .env
        # Optional: Verify the file was created (be careful not to print secrets)
        # ls -l .env # Check file exists
        # head -n 5 .env # Check first few lines (avoid printing SECRET_KEY!)

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/lobbybee-web # *** ADJUST THIS IMAGE NAME ***
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=,suffix=,format=short

    - name: Build and push Django app (web service)
      uses: docker/build-push-action@v5
      with:
        context: . # Build context is the root of your repo, as your Dockerfile is there
        file: ./Dockerfile # Explicitly point to your Dockerfile if not in context root
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/lobbybee-web:latest # *** ADJUST ***
        cache-to: type=inline

    # --- Deployment Steps ---

    # --- DIAGNOSTIC STEP ---
    - name: List files for debugging SCP
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo ""
        echo "Checking for specific files/dirs:"
        if [ -f "docker-compose.prod.yml" ]; then
          echo "  Found: docker-compose.prod.yml"
        else
          echo "  Missing: docker-compose.prod.yml"
        fi

        if [ -d "config" ]; then
          echo "  Found: config/ directory"
          echo "  Contents of config/:"
          ls -la config/
        else
          echo "  Missing: config/ directory"
        fi
    # --- END DIAGNOSTIC STEP ---

    - name: Copy necessary files to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: |
          docker-compose.prod.yml
          config
        target: "~/app"
        strip_components: 0

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/app

          # Ensure Docker Compose plugin is installed (Idempotent)
          # This part is mostly relevant if Docker Compose V2 isn't standard
          # You might be able to skip this if your EC2 setup already has it
          # ---
          # DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          # mkdir -p $DOCKER_CONFIG/cli-plugins
          # if [ ! -f "$DOCKER_CONFIG/cli-plugins/docker-compose" ]; then
          #   echo "Installing Docker Compose plugin..."
          #   curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          #   chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          # else
          #   echo "Docker Compose plugin already installed."
          # fi
          # ---

          # List files for verification
          echo "Files on EC2 (before creating .env):"
          ls -al

          # Recreate the .env file ON THE EC2 INSTANCE using the secret
          echo "Creating .env file on EC2..."
          echo "${{ secrets.ENV_PROD }}" | base64 --decode > .env

          # Verify .env was created on EC2 (optional)
          echo "Files on EC2 (after creating .env):"
          ls -al

          # Export required environment variables for docker login (if needed in script context)
          export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"

          # Login to Docker Hub within the EC2 instance
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Pull the latest images defined in docker-compose.prod.yml
          docker compose -f docker-compose.prod.yml pull

          # Gracefully stop services but try to preserve volumes
          echo "Stopping current services..."
          docker compose -f docker-compose.prod.yml down --remove-orphans

          # Start services in detached mode using the production compose file
          echo "Starting services with docker-compose.prod.yml..."
          docker compose -f docker-compose.prod.yml up -d

          # Optional: Add health checks or status reporting here
          echo "Deployment script finished. Check service status with 'docker compose -f docker-compose.prod.yml ps'"