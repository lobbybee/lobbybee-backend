{"id":"lobbybee-backend-1","title":"Implement chat system for hotel staff-guest communication using WebSockets","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T17:03:09.6602756+05:30","updated_at":"2025-10-20T17:22:11.489786471+05:30","closed_at":"2025-10-20T17:22:11.489786471+05:30"}
{"id":"lobbybee-backend-10","title":"Write WebSocket consumer tests","description":"Write comprehensive tests for WebSocket consumers (ChatConsumer and GuestChatConsumer) including connection handling, message processing, permissions, and real-time features.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-22T09:11:30.309098951+05:30","updated_at":"2025-10-22T09:11:30.309098951+05:30","dependencies":[{"issue_id":"lobbybee-backend-10","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:11:30.317813855+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-11","title":"Write URL tests and integration tests","description":"Write tests for URL routing and create integration tests that test the complete chat workflow from webhook to WebSocket communication.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T09:11:43.819573045+05:30","updated_at":"2025-10-22T09:18:21.149836618+05:30","closed_at":"2025-10-22T09:18:21.149836618+05:30","dependencies":[{"issue_id":"lobbybee-backend-11","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:11:43.828090021+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-12","title":"Write API endpoint functional tests","description":"Write comprehensive functional tests for all chat API endpoints including webhook, conversation management, and message operations. Test authentication, permissions, request/response validation, and integration with database.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T09:18:09.127258902+05:30","updated_at":"2025-10-22T09:27:21.460500498+05:30","closed_at":"2025-10-22T09:27:21.460500498+05:30","dependencies":[{"issue_id":"lobbybee-backend-12","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:18:09.139202328+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-13","title":"Write WebSocket consumer functional tests","description":"Write comprehensive functional tests for WebSocket consumers (ChatConsumer and GuestChatConsumer) including connection handling, message processing, permissions, and real-time features.","status":"in_progress","priority":3,"issue_type":"task","created_at":"2025-10-22T09:18:16.95983046+05:30","updated_at":"2025-10-22T09:27:28.12396671+05:30","dependencies":[{"issue_id":"lobbybee-backend-13","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:18:16.969288085+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-14","title":"Generalize WebSocket URL to auto-detect user departments","description":"Change WebSocket URL from /chat/\u003cdepartment_name\u003e to just /chat and automatically determine user departments from the User model's department field (JSONField list). This will support users in multiple departments and simplify the frontend URL structure.","acceptance_criteria":"- Update asgi.py to use ws/chat/ URL pattern\n- Update ChatConsumer to handle multiple departments per user\n- Automatically determine user departments from User.department JSONField\n- Maintain existing functionality for multi-department users\n- Ensure proper group management for each department","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T13:31:49.737469537+05:30","updated_at":"2025-10-22T13:40:04.485496655+05:30","closed_at":"2025-10-22T13:40:04.485496655+05:30","dependencies":[{"issue_id":"lobbybee-backend-14","depends_on_id":"lobbybee-backend-15","type":"parent-child","created_at":"2025-10-22T13:39:29.741553315+05:30","created_by":"darkwebplayer"},{"issue_id":"lobbybee-backend-14","depends_on_id":"lobbybee-backend-16","type":"parent-child","created_at":"2025-10-22T13:39:51.3902467+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-15","title":"Update asgi.py WebSocket URL pattern","description":"Change WebSocket URL pattern from ws/chat/\u003cstr:department_name\u003e/ to ws/chat/ to generalize the endpoint and remove department dependency from URL structure.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T13:38:52.463319245+05:30","updated_at":"2025-10-22T13:39:53.952318365+05:30","closed_at":"2025-10-22T13:39:53.952318365+05:30"}
{"id":"lobbybee-backend-16","title":"Update ChatConsumer to handle multi-department users","description":"Modify ChatConsumer to auto-detect user departments from User.department JSONField and handle multiple departments per user. Remove URL-based department detection and implement proper group management for multi-department access.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T13:39:26.568029521+05:30","updated_at":"2025-10-22T13:39:56.430553579+05:30","closed_at":"2025-10-22T13:39:56.430553579+05:30"}
{"id":"lobbybee-backend-17","title":"Implement AWS S3 for media storage in chat app","description":"Configure AWS S3 for storing media files (images, documents) in the chat application. Update Message model to use FileField instead of URLField for media, create S3 storage utilities, and update serializers accordingly.","status":"in_progress","priority":3,"issue_type":"feature","assignee":"darkwebplayer","created_at":"2025-10-24T16:32:04.356114111+05:30","updated_at":"2025-10-24T16:32:20.089753263+05:30"}
{"id":"lobbybee-backend-18","title":"Add media message support to GuestWebhookView","description":"Enhance GuestWebhookView to handle different media types (image, document, video, audio) from WhatsApp. Use whatsapp_utils.download_whatsapp_media() to download media and save to the media_file field. For 'service' conversation type only, which just relays conversations without templates or flows.","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-24T23:20:47.453088291+05:30","updated_at":"2025-10-24T23:23:14.556385552+05:30","closed_at":"2025-10-24T23:23:14.556385552+05:30"}
{"id":"lobbybee-backend-19","title":"Create tests for media message support in GuestWebhookView","description":"Add comprehensive tests for the new media message support in GuestWebhookView, including tests for downloading WhatsApp media, handling different media types, and error scenarios.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T23:23:11.390464391+05:30","updated_at":"2025-10-24T23:23:11.390464391+05:30"}
{"id":"lobbybee-backend-2","title":"Remove Department model dependencies from chat app","description":"","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-21T15:59:27.178961267+05:30","updated_at":"2025-10-21T15:59:37.331917483+05:30","closed_at":"2025-10-21T15:59:37.331917483+05:30"}
{"id":"lobbybee-backend-20","title":"Implement WhatsApp text message sending in ChatConsumer","description":"Add functionality to send text messages via WhatsApp when staff send messages through WebSocket. Use whatsapp_utils.py for sending messages and handle only 'service' conversation_type messages.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-25T00:35:44.598047816+05:30","updated_at":"2025-10-25T00:35:44.598047816+05:30"}
{"id":"lobbybee-backend-21","title":"Add message acknowledgment in ChatConsumer","description":"Add acknowledgment messages when messages are successfully received and processed in ChatConsumer. This will provide feedback to the sender that their message was handled successfully.","status":"closed","priority":3,"issue_type":"feature","assignee":"assistant","created_at":"2025-10-25T10:33:55.93607919+05:30","updated_at":"2025-10-25T10:35:24.824595266+05:30","closed_at":"2025-10-25T10:35:24.824595266+05:30"}
{"id":"lobbybee-backend-22","title":"Create WebSocket acknowledgment documentation","description":"Create documentation explaining how acknowledgments work and how to use them in frontend applications","status":"closed","priority":2,"issue_type":"chore","assignee":"assistant","created_at":"2025-10-25T10:37:21.523816137+05:30","updated_at":"2025-10-25T10:41:42.468107318+05:30","closed_at":"2025-10-25T10:41:42.468107318+05:30"}
{"id":"lobbybee-backend-23","title":"Create frontend acknowledgment implementation guide","description":"Create a focused guide for frontend developers on implementing WebSocket acknowledgments","status":"closed","priority":2,"issue_type":"chore","assignee":"assistant","created_at":"2025-10-25T10:38:01.65857288+05:30","updated_at":"2025-10-25T10:41:44.166446642+05:30","closed_at":"2025-10-25T10:41:44.166446642+05:30"}
{"id":"lobbybee-backend-24","title":"Create frontend acknowledgment guide file","description":"Create a dedicated file for frontend acknowledgment implementation guide","status":"closed","priority":2,"issue_type":"chore","assignee":"assistant","created_at":"2025-10-25T10:38:29.161104751+05:30","updated_at":"2025-10-25T10:41:07.219246387+05:30","closed_at":"2025-10-25T10:41:07.219246387+05:30"}
{"id":"lobbybee-backend-25","title":"Add WhatsApp media link sending support","description":"Add new functions to send WhatsApp media messages using direct links instead of uploading files first. This will improve performance by eliminating the upload step for publicly accessible media files.","acceptance_criteria":"- Add new function to send media via direct URL links\n- Support all media types: image, video, audio, document, sticker\n- Maintain existing upload functionality\n- Include proper error handling and validation\n- Add documentation for size limits and requirements","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-25T16:00:52.057812997+05:30","updated_at":"2025-10-25T16:02:16.88948195+05:30","closed_at":"2025-10-25T16:02:16.88948195+05:30"}
{"id":"lobbybee-backend-26","title":"Implement file upload endpoint for department staff","description":"Create ChatMediaUploadView in views.py to handle file uploads from department staff with validation and access control","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-27T14:54:31.796113597+05:30","updated_at":"2025-10-27T15:04:49.780868528+05:30","closed_at":"2025-10-27T15:04:49.780868528+05:30"}
{"id":"lobbybee-backend-27","title":"Enhance ChatConsumer to handle media messages","description":"Add handle_media_message method to ChatConsumer to process media file messages sent via WebSocket after upload","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-27T15:04:30.992679226+05:30","updated_at":"2025-10-27T15:04:48.138254815+05:30","closed_at":"2025-10-27T15:04:48.138254815+05:30"}
{"id":"lobbybee-backend-28","title":"Create documentation for media sending functionality","description":"Write short documentation explaining how to use the upload endpoint and WebSocket for sending media messages","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-27T15:08:26.764836514+05:30","updated_at":"2025-10-27T15:08:57.238867652+05:30","closed_at":"2025-10-27T15:08:57.238867652+05:30"}
{"id":"lobbybee-backend-29","title":"Fix department handling in media upload endpoint","description":"Fix AttributeError where request.user.department is already a list but code tries to split it as string","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-27T15:24:27.856561215+05:30","updated_at":"2025-10-27T15:49:50.607198194+05:30","closed_at":"2025-10-27T15:49:50.607198194+05:30"}
{"id":"lobbybee-backend-3","title":"Add conversation type field to Conversation model","description":"Add a conversation_type field to the Conversation model with 5 types: service, demo, checkin, checked_in, and general","design":"Add a CONVERSATION_TYPE_CHOICES field to the Conversation model with the 5 specified types:\n- service: For service-related conversations\n- demo: For demo/training conversations  \n- checkin: For check-in process conversations\n- checked_in: For conversations during guest stay\n- general: For general purpose conversations\n\nUpdate the unique_together constraint and indexes to include the new field.","acceptance_criteria":"- Conversation model has conversation_type field with proper choices\n- Default value is set to 'general'\n- Database migration is created\n- Model indexes and constraints are updated appropriately\n- All existing functionality continues to work","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T08:49:02.206941382+05:30","updated_at":"2025-10-22T08:50:29.552772384+05:30","closed_at":"2025-10-22T08:50:29.552772384+05:30"}
{"id":"lobbybee-backend-30","title":"Add WebM to OGG audio conversion function","description":"Add a function to convert incoming WebM audio files to OGG format with Opus codec for WhatsApp compatibility. The function should use pydub with specific parameters: output_buffer, format='ogg', codec='libopus', bitrate='32k', and parameters=['-application', 'voip'].","acceptance_criteria":"1. Function accepts WebM audio data as input\n2. Converts to OGG format with Opus codec\n3. Uses specified parameters (32k bitrate, voip application)\n4. Returns converted audio data as bytes\n5. Handles errors gracefully\n6. Integrates with existing WhatsApp media workflow","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-27T16:09:52.098351307+05:30","updated_at":"2025-10-27T16:09:54.192539641+05:30"}
{"id":"lobbybee-backend-4","title":"Update guest webhook to handle conversation types and routing","description":"Modify the guest webhook in chat/views.py to: 1) Auto-set conversation_type based on logic, 2) Only send service-type conversations to department staff and websockets, 3) Save other conversation types and print to console, 4) Default conversation_type to 'service'","design":"1. Add logic to auto-set conversation_type based on guest status:\n   - guest.status = 'pending_checkin' -\u003e conversation_type = 'checkin'\n   - guest.status = 'checked_in' -\u003e conversation_type = 'service' (default)\n   - guest.status = 'checked_out' -\u003e conversation_type = 'general'\n   - Add logic for demo conversations (maybe based on special department)\n\n2. Modify the webhook to:\n   - Only broadcast service-type conversations to WebSocket and department staff\n   - For other types, save message and print to console for later reply system\n   - Always set conversation_type automatically based on logic\n\n3. Update conversation creation to include conversation_type field","acceptance_criteria":"- Guest webhook automatically sets conversation_type based on guest status\n- Only service-type conversations are sent to department staff and websockets\n- Other conversation types are saved and printed to console\n- Default conversation_type is 'service' for checked_in guests\n- Message creation and storage works for all conversation types","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T08:56:15.625421516+05:30","updated_at":"2025-10-22T08:59:20.000748996+05:30","closed_at":"2025-10-22T08:59:20.000748996+05:30"}
{"id":"lobbybee-backend-6","title":"Write comprehensive tests for chat app","description":"Create comprehensive test suite for the chat app including models, views, serializers, consumers, and URLs. This will ensure all functionality is properly tested and maintain code quality.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-22T09:10:58.755815165+05:30","updated_at":"2025-10-22T09:10:58.755815165+05:30"}
{"id":"lobbybee-backend-7","title":"Create test structure and write model tests","description":"Create tests folder structure and write comprehensive tests for chat models (Conversation, Message, ConversationParticipant) including all methods, relationships, and constraints.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T09:11:03.469873806+05:30","updated_at":"2025-10-22T09:17:45.859936065+05:30","closed_at":"2025-10-22T09:17:45.859936065+05:30","dependencies":[{"issue_id":"lobbybee-backend-7","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:11:03.478386682+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-8","title":"Write serializer tests","description":"Write comprehensive tests for all chat serializers including validation, serialization, edge cases, and custom methods.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T09:11:13.800981183+05:30","updated_at":"2025-10-22T09:17:55.984519145+05:30","closed_at":"2025-10-22T09:17:55.984519145+05:30","dependencies":[{"issue_id":"lobbybee-backend-8","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:11:13.811323974+05:30","created_by":"darkwebplayer"}]}
{"id":"lobbybee-backend-9","title":"Write view tests","description":"Write comprehensive tests for all chat views including API endpoints, permissions, error handling, and integration with models and serializers.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T09:11:16.998470985+05:30","updated_at":"2025-10-22T09:18:03.254515607+05:30","closed_at":"2025-10-22T09:18:03.254515607+05:30","dependencies":[{"issue_id":"lobbybee-backend-9","depends_on_id":"lobbybee-backend-6","type":"blocks","created_at":"2025-10-22T09:11:17.008940948+05:30","created_by":"darkwebplayer"}]}
